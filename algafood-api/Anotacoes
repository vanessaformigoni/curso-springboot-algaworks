Anotações Curso de Especialista Spring REST - Algaworks

----> Modulo 02

Spring é uma tecnologia de back-end, não apenas um framework, mas sim um conjuto de projetos que resolvem vários problemas do dia dia de um programador backend. Ajuda a criar aplicações java com simplicidade e flexibilidade (Ecossistema Spring). O Desenvolvedor foca nas regras de negocios. O Spring MVC é o que a gente usa pra desenvolvimento web e pra RestApi com spring. O Spring Boot ele configura pra gente os outros projetos. É o spring boot (e não o spring) que incorpora o toncat (tanto que no spring webflux é o netty).

- Spring framework é onde fica o core do Spring junto com outras funcionalidades
- Spring core é o que trata de injeção de dependência, eventos, validações, entre outros
- Spring mvc é a "parte web" do Spring, com ele você irá desenvolver aplicações Web/Rest
- Spring boot é uma ferramenta que ajuda a agrupar e configurar projetos que usam o ecossistema Spring

Ex: O JPA é uma especificação que ta dentro do JEE, o hibernate é a implementação.
No spring MVC a gente usa servelet, ou seja, JEE, o JPA também é do JEE. Então mesmo usando spring, e a gente usa JEE.

O Spring Boot pode rodar tanto web como não, ele é um framework mais de configuração, o que a gente usar pra desenvolvimento web é o spring MVC. O SBoot é uma camada de abstração por cima do spring. Solução pra simplificar o desenvolvimento com projetos spring.

Essa estrutura de pastas, src/main/java é padronizada pelo maven. O maven baixa as dependencias de um repositorio remoto e, coloca num repositorio local, no .m2/repository para poder ser usado.

Controller quer dizer que essa classe é responsavel por receber requisições web. O Responsebory diz que o retorno seja devolvida como resposta dessa requisição.

Injeção de dependencias é uma forma de inversão de controle, aonde a gente injeta uma dependecia numa determinada classe. Injeção de dependencia diminui o acoplamento. (Voce tira as dependencias das classe e programa orientado a interface). Ex. aula 2.9.

Beam é o nome dado a objetos gerenciados pelo container do spring. O container de inversão de controle do spring é representada pela interface chamada spring context.

Anotando com @Component eu digo ao spring pra ele gerenciar aquela classe pra mim, ele ˜instancia˜ quando sobe o contexto  do spring. Quando a gente usa injeção de dependencias, não precisa dar new pq o spring já faz isso pra gente e injetou a onde nos precisavamos.

Uma classe com @Configuration é uma classe que define(configura) outros Beans (tem que ter um bean dentro da configuração). A anotação @Bean (nesse caso) signigica que o metodo inicializa, instancia e configura um objeto que será gerenciado pelo container spring.

Quando tivermos mais de um construtor, usamos o autowired pro spring saber qual instanciar. O ideal é usar o @autowired no construtor, pois ai fica claro pra quando a gente for instanciar uma nova classe, quais são as dependencias obrigatorias daquela classe. O @Qualifier da "apelidos" as classes, e voce escolhe qual usar.

Os beans tem um ciclo de vida, inicializa;áo, usando o bean e destruicao do bean. Podemos criar metodos de callback, que sâo chamados quando passa por alguma fase do ciclo de vida. @PostConstruct é pra mostar quando obean é criado e @PreDestroy momentos antes de destruir. O postConstruct é chamado após o construtor, apos ter feito todas as injeções.

O spring implementa o padrão observer. É o event handler. Ele serve pra deixar o acoplamento mais baixo entre as nossas classes. Tem que ter uma classe que publica o evento, uma que escuta e outra que define o evendo em si. Evento customizado. 

A gente pode também criar nossas proprias propriedades customizadas. 

----> Modulo 03

A persistencia de dados funciona assim: Codigo Java ->  (ORM - JPA -- Hibernate) -> Driver JDBC -> MySQL . ORM, Mapeamento Objeto Relacional. É uma tecnica para mapeamento de classes orientada a objetos pra tabelas do banco de dados. @Entity, @Id e etc são anotações JPA. Eu persisto objetos java, e o ORM vai traduzir pra SQL e fazer o que tem que ser feito no BD. JPA é a especificação. JPA não é produto. Ele descreve como algo deve funcionar, mas não implementa. Hibernate é a implementação. Ex: EclipseLink.   

No curso nos criaremos as entidades e depois faremos o mapeamento. Toda entidade tem um Id.

@Entity = a classe representa uma entidade, e a entidade representa uma tabela no modelo relacional. (anotação do JPA)
@Id = esse atributo será o identificador da nossa entidade. Se eu não especificar, o nome do atributo virá um campo na tabela. Em produção, nâo se deve gerar as tabelas automaticamente. 

spring.jpa.generate-ddl=true --> digo ao spring pta gerar as tabelas automaticamente. spring.jpa.hibernate.ddl-auto=create --> dropa e recria as tabelas sempre que aplicação reiniciar.

Se eu quiser fazer import de dados, basta criar um import.sql (tem que ser esse nome) e adicionar os valores manualmente - por script.
JPQL -> Linguagem de consulta do JPA. A aplicação web, inicia e fica esperando requisições, enquanto uma aplicação não web, inicia roda, e finaliza.

Na atualização, se voce passar um id que já existe no banco, ele salvara por cima.
Quando eu quiser deletar algo do banco, eu sempre preciso antes buscar a instancia do banco (deixar no estado de manager), para só então poder remover.

Padrao Aggregate DDD, que é um abordagem de software que nós faz desenvolver software de qualidade, com foco no dominio (negocio).

O DDD diz que o agregate root é o item maior , ex pedidos, e os agregados (itensPedidos). Nao deve haver relação de agragado com agregado, somente agregado com root ou root com root. O repository é por grupo, ou agregate root.

Lombok, a IDE tem que ter o plugin. @Getter,@Setter, @EqualsAndHashCode, @ToString = @Data. Para o equals e hashcode só usar o id, que é o nosso interesse na maioria das vezes, faco assim:

@Data
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@Entity
public class Cozinha {

	@EqualsAndHashCode.Include
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;


Na criação das tabelas pelo hibernate, o engine=MyISAM e não suporta chave estrangeira, pra resolver isso, precisamos usar o innoDB.
@JoinColumn serve pra alterar o nome da chave estrangeira. 

 @ManyToOne 
 @JoinColumn(name = "cozinha_codigo")
 private Cozinha cozinha; 

  //Muitos restaurantes possuem uma cozinha  (pode ter mais de um restaurante pra cozinha japonesa).
   // @JoinColumn(name = "cozinha_id", nullable = false)

generated DDL é mais pra desenvolvimento. Depois aprenderemos o jeito mais utilizado.

----> Modulo 04
Rest = Representional state transfer = Modelo Arquitetural. Api rest é uma API que segue o padrao rest. Rest tem a separação entre cliente e servidor (quem consome/prover). Podem evoluir independentemente. Rest teve o intuito de formalizar constraints  que são as melhores práticas. -> Cliente/Servidor -> Stateless (cada requisição é um novo client/requisicao) -> Cache -> Interface Uniforme -> Sistema em Camadas -> Codigo sob demanda

Tem header da request e da response. 

Rest é a especificação , Restful Api, é segue todas as constraints do rest, religiosamente, nas pratica isso não ocorre sempre.   
O protocolo HTTP é um protocolo resquisição resposta. O rest é independente de protocolos.
POST - Submete dados pro servidor (geralmente para salvar no banco).
GET - Solicita que seja devolvido na resposta dados na que precisamos.

Um recurso rest é qualquer coisa exposta na web, documento, video, imagem, etc.. Resource. Podemos ter singleton resource ou collection resouce. Semelhante a instancia da O.O. Rest usa URI pra identificar os recursos = Uniform Resource Identity. URL(localizador) é um tipo. de URI. A URL indentifica o recurso e como chegar nele. .com.br. Pra urls é melhor usar substantivos: Ex: produtos em ver de listarProdutos. Usar sempre no plural. Ex: produtos em vez de produto.

Controlador -> classe responsavel por receber as requisições web, tratar e devolver uma resposta. Conzinha controller é uma classe controladora de cozinha.
@RequestBody diz que a resposta dos metodos do controlador devem ir pra respotas da requisição http. 
A @Restcontroller diz que é um @Controller e @Responsebody. Não é um controlador qualquer, é um controlador rest.

Um recurso, é qualquer coisa exposta na internet.

O springboot pot padrao especifica Json.

@PathVariable serve para passar parametros pelo PATH e, consequentemente, fazer as amarrações. 
    @GetMapping("/{cozinhaId}")
    public Cozinha buscar(@PathVariable("cozinhaId") Long id)

Dessa forma, o binding é feito de forma automatica
	 @GetMapping("/{cozinhaId}")
     public Cozinha buscar(@PathVariable Long cozinhaId)

@JsonProperties muda o nome representado na api, se não colocar, permanece o nome original. @JsonIgnore não mostra na representação. @JsonRootName muda o nome no XML. (São do jackson).

Verbos: GET (obtem um recurso - não modifica um recurso), POST (cria um novo recurso - tem body, payload), PUT (atualiza recurso completo, se você não passar o 2 campo, ele virá como nullo ou vazio) -  Patch (Atualiza parcialmente um recurso, só um campo, não todos, os outros ficam inalterados). DELETE (remover recurso - não passa e nem recebe recurso). HEAD (similar ao get, mas não retorna corpo na resposta, é usado pra buscar apenas o cabeçalho.). OPTIONS (solicita uma lista de metodos suportado por um recurso).
@ResponseStatus(HttpStatus.CREATED) (serve pra mudar o status da resposta no metodo). 

O jackson é a lib responsavel por converter o objeto em json/xlm e vice versa.
ResponseEntity respresenta uma resposta http onde pode ter uma instancia de cozinha dentro de responseEntity. ResponseEntity<T>

Voce pode lançar escessão no repository, mas tratar o ideal seria no service.

@PATCH -> Faz a atualização parcial, o que eu quero mudar eu escrevo no body. Mas precisa ter cuidado em como receber pois. Melhor forma usar o Map<String, Object> pois, se eu quiser mudar um objeto pra null, ele irá mostrar.

Voce pode reutilizar um metodo do controler dentro do controller por exemplo sem precisar fazer request de postman por ex. É só chamar normnalmente, passando os atributos na ordem certa.

REFLECTIONS (API) -> É a capacidade de inspecionar objetos java em tempo de execução e até alterar, tudo em tempo de execução, de forma dinamica.. 

----> Modulo 05

O JPQL é a liguagem de consultas do JPA. Estamos usando o JPA mas não o Spring Data JPA. O @Repository possui tradutor de excepitos (não é só semantica igual ao @service). 

Os query Params do spring é pra voce passar os dados na query usando Query Strings. Para isso usamos o @RequestParam.

O Spring Data JPA é um subprojeto do Spring Data. O Spring Data JPA ele cria a implementação em tempo de execução.

FindAll = buscar.

O JPA permite que voce crie uma expressáo somente especificando o cabeçalho. Baste ter um atibuto da entidade. Ex:

Keywords
findByNome (retorna todas as entidades com o nome)
findByNameContaining(String nome)
Para mais nomes
https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation 

@RequestParam é o padrao, se voce nao colocar nada no metodo do controller, ele vem como query parameter. Mas tem que ser o nome igual.

Quando eu quiser fazer uma consulta no banco, e o spring data jpa não puder fazer por mim, terei que usar JPQL. Exemplo de uso:

@Query("from Restaurante where nome like %:nome% and cozinha.id=:id" )
    List<Restaurante> consultarPorNome(String nome, @Param("id") Long cozinhaId);

No nome é quando é igual, e o @Param pra fazer o biding quando for diferente o nome.

Podemos externalizar nossas querys pra deixar o código mais limpo, pra isso é necessario criar uma pasta chamada META-INF (em recources), e o arquivo orm.xml. Precisamos definir que o arquivo é um arquivo que faz mapeamento de entidades (existe um arquivo de configuração do proprio JPA pronto que diz isso -> https://gist.github.com/thiagofa/35d5a651a39cb0b26f050dc3b1ce8f9b). E tem que seguir o padrão de nomeclatura, como abaixo:

<named-query name="Restaurante.consultarPorNome">
            <query>
                from Restaurante
                where nome like concat('%', :nome, '%')
                and cozinha.id = :id
            </query>
        </named-query>   

Para fazer consultas personalizadas, voce cria uma classe chamada objetoRepositoryImpl , näo precisa extender a obejatoRepository, só declarar o método nomeRepositoryImpl que o spring tem a inteligência de fazer essa "amarração". (Implementação customizada). O impl faz a magia acontecer

Consultas DINAMICAS

CriateriaApi = API do JPA poderosa pra criar querys de forma programatica para querys complexas(porem burocratica) e que seriam dificeis com o JPQL. A gente monta a consulta usando codigo java e depois, uma query sql é montada e executada normalmente.

Padrão de projeto Specifications (faz parte do DDD) com SDJ:

O Spring Data jpa implementou isso na sua API. Ele encapsula um filtro e pode ser combinado com outras specifications.

@AllArgsConstructor = Cria um construtor recebendo a variável e fazendo a devida atribuição.
O Repository terá que herdar essa especificação JpaSpecificationExecutor<T>
Cada especificação cria um predicatE.
Rever Aula 5.20

-----> Modulo 06

Mapeamento bidirecional serve pros dois terem acesso aos dados um do outro. Um mapeamento é sempre o contrário do outro.
Muito importante o conceito de dono da associação, seria quem manda na associação, quem tem referencia a sobre o outro na tabela é o dono.
O Mapeamento tem quer feito de acordo em como ta no banco. Pra exibir ou não serializando, ai não faz diferenca. 
o @JsonIgnore serve para nós não termos o problema na hora de serializar ao que tenha mapeamento bidirecional.
Nem sempre é necessário usar o mapeamento bidirecional, inclusive é uma pratica ruim fazer se não for necessário.
A direção da seta serve pra dizer quem tem acesso ao o que, unidirecional ou bidirecional (o mappedy by ajuda na bidireção de acesso da classe).

No modelo ManyToMany devemos criar uma tabela de associação entre as duas entidades. Existe a tabela, mas não existe a classe. Como a gente ta usando o gerador de esquema, ele vai gerar essa tabela.

Neste exemplo, nosso modelo de domínio da aplicação (entidades - modelo de domínio) também esta sendo usado como Modelo de representação do recurso (modelo da api dto).

Componentizar nesse caso significa pegar uma classe e subdividir de duas classes ou mais. Diminui a dependência entre elas e uma pode ser reutilizada por outras classes.
Objetos embutidos/incorporados. 

@Embeddable - classe a ser incorporada, ela tem a capacidade de ser incorporada a uma classe. É uma clase parte de uma entidade e não uma entidade em si. Todas as propriedades dessa classe é refletida na tabela da entidade na qual incorpora. 

@Embedded - pra dizer que é pra incorporar aquela classe. Cidade esta relacionada com estado, uma cidade tem um estado, então o estado tem que estar inserido primeiro. 

Como restaurante tem uma chave estrangeira com cidade, precisamos adicionar a cidade, e consequentemente o estado ANTES de adicionar o restaurante.

@JsonIgnore - ignora na hora de representar a serializarão

LocalDateTime - Data hora - sem fuso horário (timestamp)

@CreationTimestamp - Quando criar, seta esse campo. @UpdateTimestamp - Quando atualizar, seta esse campo.

UTC - gmt =0 , estamos no gmt -3 .

Eager Loading - Todas as relações que terminam com ToOne, por padrão, usam a estratégia Eager Loaging (carregamento antecipado). Quando uma instancia de restaurante é carregada no banco de dados, ele vai carregar também as associaçÕes que usam o Eager Loaging (cozinha nesse caso). Para cada restaurante da lista que buscou, o JPA vai buscar a cozinha correspondente a esse restaurante. Independe ou não se vai precisar (carregamento ansioso). Nem sempre é ruim. Tem que analisar. Ele tem uma cache, então, se for um select repetido, ele não faz duas vezes. Carrega junto, pode ser um select ou vários. Depende do JPA. No final carrega ansiosamente.


Lazy Loading - (carregamento preguiçoso) - Carregamento somente quando é necessário usar a associação/entidade. Tem que pensar/avaliar. Por padrão, quem usa ToMany é lazy.

Tem sempre o trade off, JPA/JAVA não é lerdo por isso, lerdo é quem não sabe usar.

CONCLUSÃO: SEMPRE FIQUE BASTANTE ATENTO AOS SELECTS QUE ESTÃO SENDO GERADOS. 

PROBLEMA DO N+1: Pra casa restaurante gera um select de forma de pagamento. Se tiver 1000 restaurantes, gera 1000 seletos. Isso é preocupante. 

Nesse nosso caso, mesmo sem usar cozinha, ele ta sendo carregado, problema do n+1. Isso ocorre, pq nesse caso, ManyToOne tem estratégia Eager Loading.
Para mudar isso, é só add o fetch = lazzy.  

Atenção, o que Indica se a gente ta usando ou não de um objeto, é chamar um método do objeto (da instancia do obj), ex getNome(). Só chamar o objeto não é usar.

O JPA, quando vê que não é pra carregar um objeto (porque é lazy), ele cria dinamicamente, em tempo de execução, um proxy e instancia no objeto (que é lazy). E quando chama o getNome() ele chama a classe maluca que é uma subclasse de cozinha (nesse caso). 

@JsonIgnoreProperties - ignora propriedades dentro da instancia atribuída a variável. //Eu quero exibir a variável lazy, preciso então ignorar somente uma propriedade dentro do objeto, e essa propriedade é gerada em tempo de execução. 

Se for ToMany é Lazy Loading, logo se quiser alterar tem que alterar o fetch pra Eager Loading. Porém pode continuar o problema do N+1. Na prática, dificilmente a gente alterar algo pra Eager. É perigoso. 

-----> Pool de conexões e Flyway

Fluxo sem Pool de Conexões: request -> aplicação web -> abre connexão com o bd-> banco de dados -> fecha conexão com o bd.

Um pool de conexões é um componente de software/biblioteca que mantem um conjunto de conexões (ou um bd) prontas  para reutilização em uma aplicação. A conexão é reutilizada, reduzindo assim o tempo gasto na abertura e fechamento de conexões. 

Se a conexão não esta sendo usada, ela fica no estado de Idle (ociosa). 

O tempo de abrir e fechar conexão é só no começo, depois com o pool, só tem o gerenciamento dos recursos/conexões que tem no pool. Se bater mais requests que conexões, dependendo da configuração ele vai agir de uma forma. Um exemplo é criar novas conexões abrindo e fechando (para o resildual de requests). Se ultrapassar o maximo de conexões estabelecidas, uma resquest vai ficar esperando. Tudo vai depender das configurações do pool, como por exemplo o tratamento das conexões excedentes. Tudo é configuravel e amavel.

No nosso projeto, o pool já esta configurado em 10, inplicitamente pelo próprio spring boot (Lá na dependencia data jpa e filhos).  A dependencia Hikari cp (conection pool) - Solução padrão inciada com 10. 


spring.datasource.hikari.maximum-pool-size=5 //maximo de conexoes
spring.datasource.hikari.minimun-idle=3 //minimo de conexoes - nao funcionou 
spring.datasource.hikari.idle-timeout=10000 - tempo em ms pra fechar as conexoes excedentes. 

A recomendação dele é sempre usar o padrão, ir monitorando em produçao e de acordo com a necessidade vai alterando.

Com o Schema Generation em prod não é bom, porque qualquer alteração na tabela, vai deletar tudo (todas informações) pra criar de novo. É ruim o spring.jpa.hibernate.ddl-auto=create. Então uma solução é usar update, que não fica dropando as tabelas, só atualiza. Porém se alterar o nome de uma coluna, ele cria outra, não atualiza. Não da pra confiar em produçao no Schema generation.

Vamos usar o flyway pra fazer versionamento de schemas de banco de dados.
Para usar o Flayway basta adicionar a dependencia. 
Se eu quiser deletar o arquivo atual, V002, preciso deletar também no flaway_schema_history.

Na V003 temos um script migracao que cria uma nova tabela e faz o remanejamento de dados. Nesses casos podemos usar insert, update na migraçao.
Agora temos o problema que nos mexemos muito nas tabelas em desenvolvimento pra criar o script de migração, e voltar tudo, será um problema, então alguma das soluções seria:

- ter criado um backup antes de comecar (dump), drop e restora o backup.
- dropa o database, 

Prorpeties para gerar scripts do banco 
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

Eles geram o script todinho. Tem que revisar.

Olhar melhor a V004.

AfterMigrate arquivo de callback (não é migração) que é chamado em uma fase após a migracao. No flayway existem várias fases, uma é a afterMigrate que é chamado aós a migração. 
No MySql o insert ignore, tenta inserir, se der algum erro, ele ignora o erro e segue. Com isso, eu posso reiniciar a aplicação que a base se mantem igual (não reseta), pode ser o que se quer. 
Agora se eu quiser que os dados sempre voltem ao estado inicial, devo fazer o seguinte: Vai deletar todas as tabelas, e depois inserir. 
Lembrando de fazer na seguinte ordem: desabilitar as chaves estrangeiras, porque se não dará erro "set foreign_key_checks=0;" deletar as tabelas "delete from cidade;" habilitas as as chaves estrangeiras "set foreign_key_checks=1"; atualizar os ids para comecar do 1 de novo (não obrigatorio) "alter table cidade auto_increment = 1;"  Agora sim faz os inserts "insert into cozinha (id, nome) values (1, 'Tailandesa');". Coloca tudo no afterMigrate.sql
Deixar o afterMigrate assim é perigoso, porque quando subir pra prod, ele vai acabar inserindo esses dados, e não queremos. Então devemos colocar dentro de outra pasta. Para ignorar em prod essa nova pasta,com essa massa de dados, faremos depois um novo properties onde só irá ler as migrações e não lerá o atferMigration.sql. Adicona o "spring.flyway.locations=classpath:db/migration,classpath:db/testdata"

Uma migração pode dar erro. Se eu criar um script errado, ele aparece no schema history com success=0. Mesmo se ela tiver falhado, a gente não pode alterar diretamente no codigo. Opcao 01 - Deleta e criar de novo. Mas se a migração for maior, exemplo, 05 criaçoes de tabela, cria duas com sucesso e a 3, com falha. Eu vou ter que desfazer o que foi feito na mão, o flayway não genrencia isso. Só depois exlui a migração na flayway_schema_history. Em produção, tem que fazer um backup antes. Outra forma, rodar o maven pelo terminal. ./mvnw flayway:repa

Voltar nas classes itempedido e pedido. Aula 07:12 e o V007




-----> Tratamento e modelagem de erros na API

Se a excessão é lançada e não é tratada, ela aparece "grande e feia - trace " na resposta, e com status code 500 - Se for erro da aplicacao. Se a gente captura e trata, ela aparece como a gente quer. Exemplo, 404 como deveria nessa situação, porque foi erro do cliente tentar deletar uma cozinha que não existe. Usando a anotação @ResponseStatus(HttpStatus.NOT_FOUND) - en cima da exceção por exemplo, você diz que, se aquela excessão for lancada, ela irá retornar o 404, além do texto "grande e feio - trace" na resposta. Posso mudar a menssage também do stack trace @ResponseStatus(value = HttpStatus.NOT_FOUND, reason = = "Entidade não encontrada"). Ao anotar o METODO, é a mesma lógica, @ResponseStatus(HttpStatus.NO_CONTENT) //Em caso de sucesso, retorna isso. A DESVANTAGEM do @ResponseStatus e não poder alterar o corpo da mensagem, ela apenas deixa você mudar a mensagem com o 'reason'. É um pouco mais elegante com isso.

Com a @ResponseStatusExcepiton, você não precisa criar a classe da exceção "EntidadeEmUsoException" e etc. Você simplesmente "lança codigo e texto" -> throw new ResponseStatusException(HttpStatus.NOT_FOUND,String.format("Não existe cadastro de cozinha com esse código %d", cozinhaId)); A grande vantagem que vi dessa responseStatus é poder retornar diferente status code pra uma mesma excessão. 

Ele NAO RECOMENDA que em classe de dominio, seja passado um código http. A camada de serviço não deve ter conhecimdo do protocolo http, o que será respondido na api. A classe de serviço deve existir mesmo se a API não existir. Isso serve até pra classe de excessão. Se é código de negocio, não deve saber da API. Mas se tiver e menos pior, agora na classe de SERVICO, não pode. A maior vantagem é poder customizar o https code, mas não é uma boa pratica.


Impacto: quando adicionamos um estado que não existe, está retornando 404 (not found), mas o recurso existe (o recurso associado ao ID existe, mas é a request que esta errada) delete /cidades/id , então não deve retornar isso. Tem que ser 400 (bad request). O recurso é o item que representa aquele id. Se o recurso não existir, ai sim retorna 400 not found. 

É uma boa pratica ter uma representacao padrao de erro da api.

Para resolver isso, ele vai criar uma excessão mais genérica chamada NegocioException que servirá pra qualquer erro de negocio que não seja específico, e vamos mapear como bad request.

Na camada de controller eu posso pensar nos https status code, na camada de dominio Não.

Quando uma excessão herda de outra, o response status também é herdado, então não preciso colocar. A pergunta a se fazer na hora de saber se a exception está suficiente é, se "quem vai usar meu código precisa reagir diferente a dependendo do que levou a gerar a exception?? 


Vamos transformar a classe EntidadeNaoEncontradaException em abstrata, assim a gente não poderá mais instancia-la, serve pra nossa hierarquia, mas não podemos instanciar mais. Mas é importante ter ela na hierarquia porque as vezes, na hora de usar uma classe de serviço, a gente pode querer fazer um catch dela, ou seja, um tratamento mais genérico. 

Agora vamos criar um método que trata as excessões que acontecem dentro do proprio controlador, e isso será feito com o @ExceptionHandler. Vamos capturar a excesão e tratar com o uso do responseEntity.

O Builder é um padrao de projeto pra contruir objeto de uma forma mais simples, fluente. 

A exceptionHandler é bem bacana para customizar a resposta do erro, mas desse jeito de agora, ela ta só em um controller. Queremos fazer de um jeito que de pra todas classes usarem: Da pra criar um ExceptionHandler global, pra isso, crio uma classe que será genérica, e anoto com @ControllerAdvice, essa anotação diz que dentro desse componente nós podemos adicionar exceptionHandler que as exceções de todos os outros controladores do nosso projeto serão tratadas aqui. Será um ponto central de exceptionHandler. Ainda é possivel customizar o corpo da resposta. É possivel inclusive, tratar exceptions que não foram causadas por nós. 

Exitem várias exceptions que são internas do spring mvc, como HttpMediaTypeNotSupported, para elas, usamos o ResponseEntityExceptionHandler, sem precisar tratar uma a uma. E ainda podemos sobreescrever um corpo atraves do handleExceptionInternal

Conhecendo a RFC 7807 - É uma espeficicação que tenta padronizar o formato de resposta com os detalhes do erro (Problem Details for HTTP APIs). Ele tem um corpo com: status, type - uri que identifica o tipo do problema, title - descreve o tipo do erro em texto legivel, detail - descricao mais detalhada e instance - opcional uri que está causando o erro exatamente. Ainda podemos adicionar mais informaçÕes como timestamp e novas propriedades que acharmos necessários.

@JsonInclude(JsonInclude.Include.NON_NULL) - só inclua na reprentação json se não estiver  null

Commons-lang é uma biblioteca no apache que ajuda a manipular de maneira simplificada com strings, numeros, exceptions e etc.

Se eu incluir um parametro na request que não existe no objeto, ele simplismente será ignorado.
Na especificação RFC voce pode estender as propriedades pra melhorar a vida do consumidor da api. 


----- seria bom rever essa seção

----- ao terminar a oitava secao, retornar em Voltar nas classes itempedido e pedido. Aula 07:12 e o V007




----->  Validação do modelo com Bean Validation

Validar os dados que sao recebidos de uma rest api com o Bean Validation do jee. Tem objetivo de facilitar a validação de pripriedades em objetos em java. Usamos anotações nas CLASSSES DE MODELOS pra definir as RESTRIÇÕES QUE QUEREMOS em cada propriedade. O bean validadion é apenas uma especificação e nós precisamos de uma implementação pra usar.O projeto Hibernata Validation é uma implementação de referencia da especificação. 

Só a restrição (constraint) já funciona, porem lá no final, antes de salvar no banco, quando for tentar persistir, é possivel fazer isso logo no começo, por isso vamos usar o @Valid, que irá pegar já no começo. 

BindingResult bindingResult = ex.getBindingResult(); serve para armazenar as violações de coinstrants de validação. Temos acesso as propriedades violadas.

Colocando a anotação @valid voce valida em cascada, igual no requestBody. Com o @valid voce valida o objeto no inicio da requisição. Grupos de validaçãp servem pra fazer um agrupamento do que deve ou não ser validado no inicio da request. Valid valida o default, e validated os grupos de marcacao. O valid só valida o que é do dafault (se nao tem nada, é dafault)

O Resource Bundle do spring serve pra customizar mensagens dos beans validations pelo arquivo messages.properties. Agora vamos ver o do BeanValidation. A recomendacao é usar sempre o resource bundle do spring. 

Criando uma constraint (anotação) = Para ser uma constraint, deve ter o @Constraint(validatedBy = { }). E uma anotação do bean validation deve ter esses tres propriedades: 

String message() default "{javax.validation.constraints.PositiveOrZero.message}";

    Class<?>[] groups() default { };

    Class<? extends Payload>[] payload() default { };









